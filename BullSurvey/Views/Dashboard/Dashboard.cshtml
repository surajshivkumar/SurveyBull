@model SurveyDashboardViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@Model.Survey.Title - Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js"></script>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-2xl font-bold mb-8 text-center text-primary bg-gold px-3 py-3">@Model.Survey.Title</h1>
            <h2 class="text-center text-primary text-2xl font-bold">Survey Analytics Dashboard</h2>
        </div>

        <!-- Key Metrics Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <!-- Total Responses Card -->
            <div class="bg-gold rounded-xl shadow-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
                <div class="p-6">
                    <div class="flex items-center text-center">
                        <div class="p-3 rounded-full bg-primary mr-4">
                            <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <div >
                            <h3 class="text-sm text-center font-medium text-primary">Total Responses</h3>
                            <p class="text-2xl font-bold text-primary">@Model.TotalResponses</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Response Rate Card -->
            <div class="bg-gold rounded-xl shadow-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
                <div class="p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-blue-100 mr-4">
                            <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-primary">Response Rate</p>
                            <p class="text-2xl font-bold text-primary">@Model.ResponseRate.ToString("F1")%</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Completion Rate Card -->
            <div class="bg-gold rounded-xl shadow-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
                <div class="p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-yellow-100 mr-4">
                            <svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-primary">Total Questions</p>
                            <p class="text-2xl font-bold text-primary">@Model.QuestionAnalytics.Count</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Response Distribution Bar Chart -->
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-bold text-gray-800 mb-4">Response Distribution</h2>
                <div class="h-96">
                    <canvas id="myBarChart"></canvas>
                </div>
            </div>

            <!-- Time Series Chart -->
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-bold text-gray-800 mb-4">Responses Over Time</h2>
                <div class="h-96">
                    <canvas id="myTimeSeriesChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Question Analytics Doughnut Charts Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            @foreach (var question in Model.QuestionAnalytics)
            {
                <div class="bg-white rounded-xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
                    <div class="flex justify-between items-start mb-4">
                        <h3 class="text-lg font-semibold text-gray-800">@Model.Survey.Questions.FirstOrDefault(q => q.QuestionId == question.QuestionId)?.Text</h3>
                        <span class="px-3 py-1 bg-green-100 rounded-full text-md text-primary ">
                            @Model.TotalResponses  Responses
                        </span>
                    </div>
                    <div class="h-64">
                        <canvas id="doughnutChart@(question.QuestionId)"></canvas>
                    </div>
                </div>
            }
        </div>
    </div>

    @section Scripts {
    <script>
        // Helper function to generate gradient
        function createGradient(ctx, color1, color2) {
            const gradient = ctx.createLinearGradient(0, 0, 0, 400);
            gradient.addColorStop(0, color1);
            gradient.addColorStop(1, color2);
            return gradient;
        }

        // Bar Chart for Response Distribution
        const ctxBar = document.getElementById('myBarChart').getContext('2d');
        const barGradient = createGradient(ctxBar, 'rgba(59, 130, 246, 0.5)', 'rgba(59, 130, 246, 0.1)');
        
        new Chart(ctxBar, {
            type: 'bar',
            data: {

                labels: @Json.Serialize(Model.QuestionAnalytics.Select(q => $"Q{q.QuestionId}")),
                datasets: [{
                    label: 'Responses',
                    data: [@Model.TotalResponses,@Model.TotalResponses],
                    backgroundColor: barGradient,
                    borderColor: 'rgb(59, 130, 246)',
                    borderWidth: 1,
                    borderRadius: 6,
                    barThickness: 'flex'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    datalabels: {
                        color: '#333',
                        anchor: 'end',
                        align: 'top',
                        offset: 4
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            drawBorder: false
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });

        // Time Series Chart for Responses Over Time
        const ctxTime = document.getElementById('myTimeSeriesChart').getContext('2d');
        const lineGradient = createGradient(ctxTime, 'rgba(16, 185, 129, 0.2)', 'rgba(16, 185, 129, 0)');
        
        new Chart(ctxTime, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.TimeSeries.Select(ts => ts.Date.ToString("yyyy-MM-dd")))),  // Format the Date here
                datasets: [{
                    label: 'Responses',
                    data: @Json.Serialize(Model.TimeSeries.Select(ts => ts.Count)),
                    fill: true,
                    backgroundColor: lineGradient,
                    borderColor: 'rgb(16, 185, 129)',
                    borderWidth: 2,
                    tension: 0.4,
                    pointBackgroundColor: 'rgb(16, 185, 129)',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2,
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            drawBorder: false
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        });
        
        // Doughnut charts for each question
        const colorPalette = [
            'rgba(16, 185, 129, 0.8)',  // Green
            'rgba(59, 130, 246, 0.8)',  // Blue
            'rgba(249, 115, 22, 0.8)',  // Orange
            'rgba(236, 72, 153, 0.8)',  // Pink
            'rgba(139, 92, 246, 0.8)',  // Purple
            'rgba(245, 158, 11, 0.8)',  // Yellow
        ];

        @foreach (var question in Model.QuestionAnalytics)
        {
            <text>
            new Chart(document.getElementById('doughnutChart@(question.QuestionId)').getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: @Json.Serialize(question.Answers.Select(a => a.TextAnswer)),
                    datasets: [{
                        data: @Json.Serialize(question.Answers.Select(a => a.Count)),
                        backgroundColor: colorPalette.slice(0, @question.Answers.Count()),
                        borderWidth: 2,
                        borderColor: 'white'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        },
                        datalabels: {
                            color: 'white',
                            font: {
                                weight: 'bold'
                            },
                            formatter: function(value, context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return percentage + '%';
                            }
                        }
                    },
                    cutout: '60%'  // Hole to make the chart a doughnut
                }
            });
            </text>
        }
    </script>
    }
</body>
</html>
